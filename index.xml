<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gex&#39;s Blog</title>
    <link>https://gelearner.github.io/</link>
    <description>Recent content on Gex&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 06 Oct 2019 11:38:45 +0800</lastBuildDate>
    
	<atom:link href="https://gelearner.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring学习4</title>
      <link>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A04/</link>
      <pubDate>Sun, 06 Oct 2019 11:38:45 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A04/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring学习3</title>
      <link>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A03/</link>
      <pubDate>Sun, 06 Oct 2019 11:38:39 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A03/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spring学习（2）之Spring的bean装配</title>
      <link>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A02%E4%B9%8Bspring%E7%9A%84bean%E8%A3%85%E9%85%8D/</link>
      <pubDate>Sun, 06 Oct 2019 11:38:34 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A02%E4%B9%8Bspring%E7%9A%84bean%E8%A3%85%E9%85%8D/</guid>
      <description>Spring的bean装配 在Spring中有三种装配的方式
 在 XML 文件中显式配置 在 Java 的接口和类中实现配置 隐式 Bean 的发现机制和自动装配原则  ==注意：自动装配原则在注解和xml中都会使用==
0.方式选择的原则 在现实的工作中，这 3 种方式都会被用到，并且在学习和工作之中常常混合使用，所以这里给出一些关于这 3 种优先级的建议：
1.最优先：通过隐式 Bean 的发现机制和自动装配的原则。 基于约定由于配置的原则，这种方式应该是最优先的
 好处：减少程序开发者的决定权，简单又不失灵活。  2.其次：Java 接口和类中配置实现配置 在没有办法使用自动装配原则的情况下应该优先考虑此类方法
 好处：避免 XML 配置的泛滥，也更为容易。 典型场景：一个父类有多个子类，比如学生类有两个子类，一个男学生类和女学生类，通过 IoC 容器初始化一个学生类，容器将无法知道使用哪个子类去初始化，这个时候可以使用 Java 的注解配置去指定。  3.最后：XML 方式配置 在上述方法都无法使用的情况下，那么也只能选择 XML 配置的方式。
 好处：简单易懂（当然，特别是对于初学者） 典型场景：当使用第三方类的时候，有些类并不是我们开发的，我们无法修改里面的代码，这个时候就通过 XML 的方式配置使用了。  4.xml 与 注解：
 xml 更加万能，适用于任何场合！维护简单方便 注解 不是自己类使用不了，维护相对复杂！  xml 与 注解最佳实践：
 xml 用来管理bean； 注解只负责完成属性的注入； 我们在使用的过程中，只需要注意一个问题：必须让注解生效，就需要开启注解的支持  参考：地址</description>
    </item>
    
    <item>
      <title>Spring学习（1）之IoC和Di</title>
      <link>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A01%E4%B9%8Bioc%E5%92%8Cdi/</link>
      <pubDate>Sun, 06 Oct 2019 11:38:19 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/spring%E5%AD%A6%E4%B9%A01%E4%B9%8Bioc%E5%92%8Cdi/</guid>
      <description>Spring学习（1）之IoC和Di 1.Spring 1.1简介  是一个大杂烩，使现有的技术更快的使用，整合了现有的所有的框架。 2002年，首次推出了SPring的框架的雏形：interface21框架。 创始人:Rod Johnson,Spring Framework创始人，著名作者。很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。提出了著名的造轮子的理论。  现在的技术栈普遍是：
 SSH ： Struct2 + Spring + Hibernate！ SSM ： SpringMvc + Spring + Mybatis！  Spring的获取的来源
官网：https://spring.io/projects/spring-framework#overview
官方下载地址： http://repo.spring.io/release/org/springframework/spring
GitHub：https://github.com/spring-projects/spring-framework
Spring的jar包：
&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; // 后期使用的时候，会对数据库进行相关的操作 &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  1.2优点与缺点： 优点：
==Spring是一个轻量级的控制反转（ioc）和面向切面编程（aop）的框架。==
 开源性 轻量级的，非入侵式的。 控制反转和，面向切面编程的。 支持对事务的处理，对框架的支持。  缺点：
配置十分的繁琐，被称为配置地狱。
1.3组成：  Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块。 Web层包含了Web、Web-Servlet、WebSocket、Web-Porlet模块。 AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现。 Core Container(核心容器)：包含有Beans、Core、Context和SpEL模块。 Test模块支持使用JUnit和TestNG对Spring组件进行测试。  1.</description>
    </item>
    
    <item>
      <title>博客搭建步骤</title>
      <link>https://gelearner.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Sun, 06 Oct 2019 10:08:58 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</guid>
      <description>第一步：下载hugo 在官网下载hugo安装包，注意最好使用最新版本的安装包 官网：https://github.com/gohugoio/hugo/releases
根据自己的电脑下载安装装包，本人使用0.58.3最新版本，高兼容下
第二步：配置环境 配置hugo的环境，先在一个盘里面建一个Hugo的文件夹，里面再建一个bin文件夹，并将hugo文件解压进去，如：d:/Hugo/bin
进行路径的配置，配置与java等相同，配置完成的标志是：在桌面cmd中输入hugo version
第三步：创建站点 在D:/Hugo文件夹下打开cmd，创建一个新的站点：hugo new site blog(站点名自己起),创建后会生成一个blog文件夹，里面嵌套了很多文件夹。
第四步：下载皮肤 下载皮肤的官网：https://themes.gohugo.io/
挑选一个心怡的皮肤，从github下载或者直接使用git检出到本地，放在thtmes文件夹中
git检出：使用cmd指令台进入themes文件夹cd blog/themes，在这里打开git控制台输入：
git clone +github给的git连接
第五步：本地网站测试 在blog文件夹下打开cmd，输入：
hugo server--theme=hugo-theme-m10c
在本地浏览器输入http://localhost:1313/
出现官方默认的页面说明可用，根据每个皮肤的要求可以更改配置文件
创建新博客的命令：hugo new post/***.md,自己创建的md文件不能使用，使用命令建出来的博客有约束头代码。
第六步：挂接到github上 先在github上创建一个仓库，仓库的名字是Username.github.io
然后使用hugo生成静态的页面：使用cmd
hugo --theme=hugo-natrium-theme --baseUrl=&amp;quot;https://Username.github.io/&amp;quot;
命令结束后会在blog中创建一个public文件，这时只需要将文件上传到仓库中即可：
Git命令：
 git init
 git add .
 git commit -m &amp;lsquo;first commit&amp;rsquo;
 git remote add origin https://github.com/Username/Username.github.io.git
 git pull &amp;ndash;rebase origin master
 git push -u origin master</description>
    </item>
    
    <item>
      <title>Mybatis源码分析</title>
      <link>https://gelearner.github.io/post/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 05 Oct 2019 22:16:38 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description> Mybatis源码解析 步骤：
 使用Resources类的方法加载配置文件
in = Resources.getResourceAsStream(&amp;quot;sqlconfig.xml&amp;quot;);  实例化sqlsessionfactorybuild实例化对象
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);  分析上面的build方法，使用XMLConfigBuilder类进行解析
XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);  使用debug进行调试，获到了配置文件中的所有的配置信息
 sessionFactory的实例化
SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(in);  在debug中发现一个事务管理
 会产生多个执行器
 多个执行器里面的一个默认的执行器会产生一个sqlsession的对象
 使用sqlsession对象对数据库进行curd的操作，在这里会根据curd的返回值，对上面的事务是提交还是回滚
 判断事务是否提交，如果事务成功，需要对事务进行提交，如果事务失败，则需要进行事务的回滚。
 手动提交事务
 释放资源，根据异常的执行的顺序，先打开的后关闭的原则
  </description>
    </item>
    
    <item>
      <title>Mybatis配置文件</title>
      <link>https://gelearner.github.io/post/mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 05 Oct 2019 22:16:12 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description> 标准的Mybatis核心配置文件 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;properties resource=&amp;quot;db.properties&amp;quot;/&amp;gt; &amp;lt;settings&amp;gt; &amp;lt;setting name=&amp;quot;logImpl&amp;quot; value=&amp;quot;STDOUT_LOGGING&amp;quot;/&amp;gt; &amp;lt;/settings&amp;gt; &amp;lt;typeAliases&amp;gt; &amp;lt;package name=&amp;quot;com.g.pojo&amp;quot;/&amp;gt; &amp;lt;/typeAliases&amp;gt; &amp;lt;environments default=&amp;quot;mysql&amp;quot;&amp;gt; &amp;lt;environment id=&amp;quot;mysql&amp;quot;&amp;gt; &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;&amp;gt;&amp;lt;/transactionManager&amp;gt; &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;${driver}&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;${url}&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${username}&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${password}&amp;quot;/&amp;gt; &amp;lt;/dataSource&amp;gt; &amp;lt;/environment&amp;gt; &amp;lt;/environments&amp;gt; &amp;lt;mappers&amp;gt; &amp;lt;mapper class=&amp;quot;com.g.dao.UserMapper&amp;quot;/&amp;gt; &amp;lt;/mappers&amp;gt; &amp;lt;/configuration&amp;gt;  db.properties
driver=com.mysql.jdbc.Driver url=jdbc:mysql://localhost:3306/buy?useUnicode=true&amp;amp;characterEncoding=UTF8 username=root password=123456  </description>
    </item>
    
    <item>
      <title>Mybatis学习3</title>
      <link>https://gelearner.github.io/post/mybatis%E5%AD%A6%E4%B9%A03/</link>
      <pubDate>Sat, 05 Oct 2019 22:14:54 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/mybatis%E5%AD%A6%E4%B9%A03/</guid>
      <description>[TOC]
教师和学生的关系图：
1.多表查询 1.1、多对一查询 案例：查询学生表联合老师信息
 编写pojo类 teacher类：
@Data public class Teacher implements Serializable { private int id; private String name; }   Student类：
@Data public class Student implements Serializable { private int id; private String name; private int tid; private Teacher teachers; }   编写mapper文件
&amp;lt;mapper namespace=&amp;quot;com.g.dao.StudentMapper&amp;quot;&amp;gt; &amp;lt;select id=&amp;quot;findall&amp;quot; resultMap=&amp;quot;studentmap&amp;quot;&amp;gt; select s.id 学号,s.name 姓名,t.name tname from student s left join teacher t on s.tid = t.id &amp;lt;/select&amp;gt; &amp;lt;resultMap id=&amp;quot;studentmap&amp;quot; type=&amp;quot;student&amp;quot;&amp;gt; &amp;lt;result property=&amp;quot;id&amp;quot; column=&amp;quot;学号&amp;quot;/&amp;gt; &amp;lt;result property=&amp;quot;name&amp;quot; column=&amp;quot;姓名&amp;quot;/&amp;gt; &amp;lt;association property=&amp;quot;teachers&amp;quot; javaType=&amp;quot;teacher&amp;quot;&amp;gt; &amp;lt;result property=&amp;quot;name&amp;quot; column=&amp;quot;tname&amp;quot;/&amp;gt; &amp;lt;/association&amp;gt; &amp;lt;/resultMap&amp;gt; &amp;lt;/mapper&amp;gt;  在核心配置文件中注册mapper文件</description>
    </item>
    
    <item>
      <title>Mybatis学习2</title>
      <link>https://gelearner.github.io/post/mybatis%E5%AD%A6%E4%B9%A02/</link>
      <pubDate>Sat, 05 Oct 2019 22:13:46 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/mybatis%E5%AD%A6%E4%B9%A02/</guid>
      <description>[TOC]
1.生命周期和作用域 ==注意==：生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的并发问题。
这是三个对象的生命周期：
1.1、SqlSessionFactoryBuilder：  一旦创建了 SqlSessionFactory，这个工厂构造器就会结束，一次性的工厂构造器 局部变量  1.2、SqlSessionFactory：  sqlsession工厂的实例化，可以想象成数据库的连接池。 *SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在*，没有任何理由丢弃它或重新创建另一个实例。 因此 SqlSessionFactory 的最佳作用域是应用作用域。 最简单的就是使用单例模式或者静态单例模式。  1.3、sqlsession  连接到连接池的一个请求！ SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 用完之后需要赶紧关闭，否则资源被浪费。  2.日志 2.1、日志工厂 我们知道，在之前，我们使用的排错的方式就是debug和小黄鸭自sout法，这时出现了一个、便捷的工具出现了—日志工厂。
==注 意：这里的知识点在使用Mybatis强大的工具包下，配置核心配置文件中的setting下的参数==
logImpl注意在使用这个日志工厂的时候，严格注意大小写，日志的类型有很多：
 LOG4J 【掌握】 STDOUT_LOGGING 【掌握】 LOG4J2 JDK_LOGGING COMMONS_LOGGING SLF4J NO_LOGGING  2.2、STDOUT_LOGGING 标准的日志的输出 步骤：
 在核心配置文件中，编写下面的代码：
&amp;lt;settings&amp;gt; &amp;lt;setting name=&amp;quot;logImpl&amp;quot; value=&amp;quot;STDOUT_LOGGING&amp;quot;/&amp;gt; &amp;lt;/settings&amp;gt;  然后进行下面的操作就会发现：   2.3、log4j 1.概述  Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件 我们也可以控制每一条日志的输出格式； 通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。  2.log4j的使用步骤：  在maven中导入log4j的jar包</description>
    </item>
    
    <item>
      <title>Mybatis学习1</title>
      <link>https://gelearner.github.io/post/mybatis%E5%AD%A6%E4%B9%A01/</link>
      <pubDate>Sat, 05 Oct 2019 22:12:32 +0800</pubDate>
      
      <guid>https://gelearner.github.io/post/mybatis%E5%AD%A6%E4%B9%A01/</guid>
      <description>[TOC]
MyBatis入门 1.概念： 前面说到，使用经典的MVC框架，这种框架分工明确，web处理与前端的数据的交互，service处理业务的逻辑，dao层操作数据库，在实际的开发过程中，如果使用原始的操作方式进行代码的编写，和功能的实现，太浪费时间了，这个时候就有大牛向Apache组织提供了框架这种将每个模块进行封装，这就是框架。
说到框架：在2010年以前使用的ssh框架（struts+spring+hibernate）的企业是比较多的，但随着时间的推移，现在比较火的框架是ssm框架（spring mvc +spring+mybatis）；
mybatis框架的概述：  优点：开发者在开发的过程中，只需要关注sql语句的书写，不需要考虑driver驱动的加载，建立连接，创建Statement对象；框架的底层对数据整个过程进行了封装。 采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。  为什么不使用原生的方式： 1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。 2、Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java代码。 3、使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。 4、对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成 pojo 对象解析比较方便。
2.快速上手：  创建一个maven普通类
 在pom.xml文件中导入mybatis、mysql、log4j（日志/可以不用），junit（测试）
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.g&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis_demo2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&amp;gt; &amp;lt;!--导入mybatis--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.4.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>